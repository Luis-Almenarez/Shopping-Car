{"version":3,"file":"bundle.js","sources":["../../src/JS/product.js","../../src/JS/cart.js"],"sourcesContent":["const product = document.getElementById(\"producto\");\r\nconst productImage = document.querySelector(\".producto__imagen\");\r\nconst thumbs = document.querySelector(\".producto__thumbs\");\r\n/*BOTONTES CANTIDAD*/\r\nconst btnPlus = document.querySelector(\"#incrementar-cantidad\");\r\nconst btnMinus = document.querySelector(\"#disminuir-cantidad\");\r\nlet inputQuantity = document.querySelector(\"#cantidad\");\r\n/*BOTONTES CANTIDAD*/\r\n\r\n/* COLOR */\r\nconst colorSelected = product.querySelector(\"#propiedad-color\");\r\n\r\n// Agrega un evento de clic al elemento 'thumbs' (las miniaturas de imágenes del producto).\r\nthumbs.addEventListener(\"click\", (e) => {\r\n  // Verifica si el objetivo del evento de clic es una etiqueta 'IMG'.\r\n  if (e.target.tagName === \"IMG\") {\r\n    // Obtiene la fuente (src) de la imagen que se hizo clic.\r\n    const imageSrc = e.target.src;\r\n\r\n    // Encuentra la última barra diagonal en la ruta de la imagen.\r\n    const lastIndex = imageSrc.lastIndexOf(\"/\");\r\n\r\n    // Extrae el nombre de la imagen a partir de la ruta completa.\r\n    const nameImage = imageSrc.substring(lastIndex + 1);\r\n\r\n    // Actualiza la fuente de la imagen principal del producto con la nueva imagen seleccionada.\r\n    productImage.src = `./img/products/${nameImage}`;\r\n  }\r\n});\r\n\r\n// Con esta función actualizo la miniatura del color que se haya seleccionado\r\ncolorSelected.addEventListener(\"click\", (e) => {\r\n  if (e.target.tagName === \"INPUT\") {\r\n    const color = e.target.value;\r\n    productImage.src = `./img/products/${color}.jpg`;\r\n\r\n    // Cambia las rutas de las miniaturas según el color seleccionado\r\n    const thumbnails = document.querySelectorAll(\".producto__thumb-img\");\r\n    thumbnails.forEach((thumbnail, index) => {\r\n      thumbnail.src = `./img/thumbs/${color}/${color}${index + 1}.jpg`;\r\n    });\r\n  }\r\n});\r\n\r\n// Con esta función incremento en 1 el valor del input siempre que se haga click\r\nbtnPlus.addEventListener(\"click\", (e) => {\r\n  inputQuantity.value = parseInt(inputQuantity.value) + 1;\r\n});\r\n\r\n// Con esta función disminuyo en 1 el valor del input siempre que se haga click\r\nbtnMinus.addEventListener(\"click\", (e) => {\r\n  inputQuantity.value = parseInt(inputQuantity.value) - 1;\r\n  if (parseInt(inputQuantity.value) <= 1) {\r\n    inputQuantity.value = 1;\r\n  }\r\n});\r\n","import productsData from \"./Data/products.json\";\r\n// Selecciona los botones de abrir el carrito por su atributo 'data-accion'.\r\nconst btnOpenCart = document.querySelectorAll('[data-accion=\"abrir-carrito\"]');\r\n// Selecciona los botones de cerrar el carrito por su atributo 'data-accion'.\r\nconst btnCloseCart = document.querySelectorAll('[data-accion=\"cerrar-carrito\"]');\r\n// Obtiene el elemento del carrito por su ID.\r\nconst windowCart = document.getElementById(\"carrito\");\r\n// Obtiene el botón 'Add to Cart' del HTML\r\nconst addCart = document.getElementById(\"agregar-al-carrito\");\r\n// Obtiene el contenedor de todo el producto\r\nconst product = document.getElementById(\"producto\");\r\n// Generamos una variable la cual tendrá la cantidad de productos que el usuario agregue\r\nlet cartProduct = [];\r\n\r\n// Función para renderizar el contenido del carrito y mostrarlo al usuario.\r\nconst renderCart = () => {\r\n  // Agrega la clase \"carrito--active\" para mostrar la ventana del carrito.\r\n  windowCart.classList.add(\"carrito--active\");\r\n\r\n  // Eliminamos los productos que hay contenidos en el carrito para que no los duplique si se vuelve a abrir\r\n  const productsInCart = windowCart.querySelectorAll(\".carrito__producto\");\r\n  productsInCart.forEach((product) => product.remove());\r\n\r\n  // Itera a través de cada producto en el array \"cartProduct\".\r\n  cartProduct.forEach((cartProduct) => {\r\n    /* Se obtiene el precio del archivo products.js\r\n     siempre y cuando el id del item coincide con el que está en products.js */\r\n    productsData.products.forEach((productDataBase) => {\r\n      if (productDataBase.id === cartProduct.id) {\r\n        cartProduct.price = productDataBase.price;\r\n      }\r\n    });\r\n\r\n    // Establece la ruta de la imagen que se quiere mostrar dependiendo de la decisión del usuario\r\n    let thumbSrc = product.querySelectorAll(\".producto__thumb-img\")[0].src;\r\n    if (cartProduct.color === \"silver\") {\r\n      thumbSrc = \"./img/thumbs/silver/silver.jpg\";\r\n    } else if (cartProduct.color === \"blue\") {\r\n      thumbSrc = \"./img/thumbs/blue/blue.jpg\";\r\n    } else if (cartProduct.color === \"black\") {\r\n      thumbSrc = \"./img/thumbs/black/black.jpg\";\r\n    }\r\n    // Genera una plantilla HTML para representar el producto en el carrito.\r\n    let templateProduct = `\r\n      <div class=\"carrito__producto-info\">\r\n        <img src=\"${thumbSrc}\" alt=\"\" class=\"carrito__thumb\" />\r\n        <div>\r\n          <p class=\"carrito__producto-nombre\">\r\n            <span class=\"carrito__producto-cantidad\">${cartProduct.quantity} x </span>${cartProduct.name}\r\n          </p>\r\n          <p class=\"carrito__producto-propiedades\">\r\n            Shipping Type:<span>${cartProduct.ShippingType}</span> Color:<span>${cartProduct.color}</span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"carrito__producto-contenedor-precio\">\r\n        <button class=\"carrito__btn-eliminar-item\" data-accion=\"eliminar-item-carrito\">\r\n          <i class=\"bi bi-x\"></i>\r\n        </button>\r\n        <p class=\"carrito__producto-precio\">$${cartProduct.price * cartProduct.quantity}</p>\r\n      </div>\r\n    `;\r\n\r\n    // Crea un nuevo elemento div para el producto en el carrito.\r\n    let itemCart = document.createElement(\"div\");\r\n\r\n    // Agrega la clase \"carrito__producto\" al elemento div creado.\r\n    itemCart.classList.add(\"carrito__producto\");\r\n\r\n    // Asigna la plantilla HTML como contenido del elemento div.\r\n    itemCart.innerHTML = templateProduct;\r\n\r\n    // Agrega el elemento del producto al cuerpo del carrito.\r\n    windowCart.querySelector(\".carrito__body\").appendChild(itemCart);\r\n  });\r\n};\r\n\r\n// Abrir carrito.\r\nbtnOpenCart.forEach((btn) => {\r\n  btn.addEventListener(\"click\", (e) => {\r\n    renderCart(); // Muestra el carrito al hacer clic en un botón de abrir.\r\n  });\r\n});\r\n\r\n// Cerrar carrito.\r\nbtnCloseCart.forEach((btn) => {\r\n  btn.addEventListener(\"click\", (e) => {\r\n    windowCart.classList.remove(\"carrito--active\"); // Oculta el carrito al hacer clic en un botón de cerrar.\r\n  });\r\n});\r\n\r\n// Cuando se hace clic en el botón \"addCart\", se recopilan los datos del producto seleccionado\r\n// y se agregan al array \"cartProduct\" para mostrarlos en el carrito más tarde.\r\naddCart.addEventListener(\"click\", (e) => {\r\n  let id = product.dataset.productoId; // Obtiene el ID del producto desde el atributo \"data-producto-id\".\r\n  let name = product.querySelector(\".producto__nombre\").innerText; // Obtiene el nombre del producto.\r\n  let quantity = parseInt(product.querySelector(\"#cantidad\").value); // Obtiene la cantidad del producto como un número entero.\r\n  let color = product.querySelector(\"#propiedad-color input:checked\").value; // Obtiene el color seleccionado del producto.\r\n  let ShippingType = product.querySelector(\"#propiedad-envio input:checked\").value; // Obtiene el tipo de envío seleccionado para el producto.\r\n\r\n  if (cartProduct.length > 0) {\r\n    let productInCart = false;\r\n    cartProduct.forEach((item) => {\r\n      if (item.id === id && item.name === name && item.color === color && item.ShippingType === ShippingType) {\r\n        item.quantity += quantity;\r\n        productInCart = true;\r\n      }\r\n    });\r\n    if (!productInCart) {\r\n      // Agrega los datos recopilados como un nuevo objeto al array \"cartProduct\".\r\n      cartProduct.push({\r\n        id: id,\r\n        name: name,\r\n        quantity: quantity,\r\n        color: color,\r\n        ShippingType: ShippingType,\r\n      });\r\n    }\r\n  } else {\r\n    // Agrega los datos recopilados como un nuevo objeto al array \"cartProduct\".\r\n    cartProduct.push({\r\n      id: id,\r\n      name: name,\r\n      quantity: quantity,\r\n      color: color,\r\n      ShippingType: ShippingType,\r\n    });\r\n  }\r\n});\r\n\r\n// Eliminar productos\r\n\r\nwindowCart.addEventListener(\"click\", (e) => {\r\n  if (e.target.closest(\"button\")?.dataset.accion === \"eliminar-item-carrito\") {\r\n    let myProduct = e.target.closest(\".carrito__producto\");\r\n    let productIndex = [...windowCart.querySelectorAll(\".carrito__producto\")].indexOf(myProduct);\r\n\r\n    cartProduct = cartProduct.filter((item, index) => {\r\n      if (index !== productIndex) {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    renderCart();\r\n  }\r\n});\r\n"],"names":["product","document","getElementById","productImage","querySelector","thumbs","btnPlus","btnMinus","inputQuantity","colorSelected","addEventListener","e","target","tagName","imageSrc","src","lastIndex","lastIndexOf","nameImage","substring","color","value","querySelectorAll","forEach","thumbnail","index","parseInt","btnOpenCart","btnCloseCart","windowCart","addCart","cartProduct","renderCart","classList","add","remove","productsData","products","productDataBase","id","price","thumbSrc","templateProduct","quantity","name","ShippingType","itemCart","createElement","innerHTML","appendChild","btn","dataset","productoId","innerText","length","productInCart","item","push","closest","accion","myProduct","productIndex","indexOf","filter"],"mappings":"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"}